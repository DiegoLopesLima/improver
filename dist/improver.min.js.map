{"version":3,"sources":["improver.js"],"names":["compose","functions","filter","value","index","size","length","removeFromString","replace","expression","trimLeft","trimRight","trim","upperCase","String","toUpperCase","identity","noop","prime","warble","is","Math","sqrt","floor","improver","root","factory","define","amd","exports","module"],"mappings":"sPAAA,CAEA,GAEAA,SAAA,QAAAA,QAAA,EAAA,+BAAAC,SAAA,sCAAAA,SAAA,wBAEAA,UAAAA,UAAAC,MAAA,CAAA,sBAAA,OAAAC,MAAA,GAAA,UAAA,EAAA,CAAA,CAEA,MAAA,gBAAA,CAEA,IAAA,GAAAC,OAAA,CAAA,CAAAC,KAAAJ,UAAAK,MAAA,CAAAF,MAAAC,IAAA,CAAAD,OAAA,EAEAD,MAAAF,UAAAG,KAAA,EAAAD,KAAA,CAAA,CAFA,CAIA,MAAAA,MAAA,CAEA,CARA,CAUA,CAhBA,CAkBAI,iBAAA,QAAAA,iBAAA,mBAAA,uBAAAJ,OAAAK,OAAA,CAAAC,UAAA,CAAA,EAAA,CAAA,EAAA,EAlBA,CAoBAC,SAAAH,iBAAA,UAAA,CApBA,CAsBAI,UAAAJ,iBAAA,UAAA,CAtBA,CAwBAK,KAAAZ,QAAAU,QAAA,CAAAC,SAAA,CAxBA,CA0BAE,UAAA,QAAAA,UAAA,cAAAC,QAAAX,KAAA,EAAAY,WAAA,EAAA,EA1BA,CA4BAC,SAAA,QAAAA,SAAA,cAAAb,MAAA,EA5BA,CA8BAc,KAAA,QAAAA,KAAA,EAAA,CAAA,CA9BA,CAgCAC,MAAA,QAAAA,MAAA,OAAA,CAEA,GAAAC,OAAAC,EAAA,CAAAjB,KAAA,CAAA,MAAA,GAAAA,QAAA,CAAA,EAAAgB,OAAAC,EAAA,CAAAC,KAAAC,IAAA,CAAAnB,KAAA,CAAA,CAAA,SAAA,CAAA,CAEA,MAAA,MAAA,CAEA,IAAA,GAAAC,OAAAiB,KAAAE,KAAA,CAAApB,MAAA,CAAA,CAAA,CAAAC,MAAA,CAAA,CAAAA,OAAA,EAEA,GAAAD,MAAAC,KAAA,GAAA,CAAA,CAEA,MAAA,MAAA,CAJA,CAMA,MAAA,KAAA,CAEA,CA9CA,CAgDA,GAEAoB,UAAA,CACAxB,eADA,CAEAO,iCAFA,CAGAG,iBAHA,CAIAC,mBAJA,CAKAC,SALA,CAMAC,mBANA,CAOAG,iBAPA,CAQAC,SARA,CASAC,WATA,CAFA,CAcA,CAAA,SAAAO,IAAA,CAAAC,OAAA,CAAA,CAEA,GAAA,MAAAC,OAAA,GAAA,UAAA,EAAAA,OAAAC,GAAA,CAEAD,OAAA,EAAA,CAAAD,OAAA,EAFA,IAIA,IAAA,OAAAG,QAAA,mCAAAA,OAAA,KAAA,QAAA,CAEAC,OAAAD,OAAA,CAAAH,SAAA,CAFA,IAMAD,MAAAD,QAAA,CAAAE,SAAA,CAEA,CAdA,YAcA,iBAAAF,SAAA,EAdA,EAgBA","file":"improver.min.js","sourcesContent":["{\r\n\r\n\tconst\r\n\r\n\t\tcompose = (...functions) => {\r\n\r\n\t\t\tfunctions = functions.filter(value => typeof value === 'function');\r\n\r\n\t\t\treturn value => {\r\n\r\n\t\t\t\tfor (let index = 0, size = functions.length; index < size; index++)\r\n\r\n\t\t\t\t\tvalue = functions[index](value);\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tremoveFromString = expression => value => value.replace(expression, ''),\r\n\r\n\t\ttrimLeft = removeFromString(/^[\\s\\t]+/),\r\n\r\n\t\ttrimRight = removeFromString(/[\\s\\t]+$/),\r\n\r\n\t\ttrim = compose(trimLeft, trimRight),\r\n\r\n\t\tupperCase = value => String(value).toUpperCase(),\r\n\r\n\t\tidentity = value => value,\r\n\r\n\t\tnoop = () => {},\r\n\r\n\t\tprime = value => {\r\n\r\n\t\t\tif ((warble.is(value, 'even') && value !== 2) || warble.is(Math.sqrt(value), 'integer'))\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor (let index = Math.floor(value / 2); index > 1; index--)\r\n\r\n\t\t\t\tif (value % index === 0)\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t};\r\n\r\n\tlet\r\n\r\n\t\timprover = {\r\n\t\t\tcompose,\r\n\t\t\tremoveFromString,\r\n\t\t\ttrimLeft,\r\n\t\t\ttrimRight,\r\n\t\t\ttrim,\r\n\t\t\tupperCase,\r\n\t\t\tidentity,\r\n\t\t\tnoop,\r\n\t\t\tprime\r\n\t\t};\r\n\r\n\t((root, factory) => {\r\n\r\n\t\tif (typeof define === 'function' && define.amd)\r\n\r\n\t\t\tdefine([], factory);\r\n\r\n\t\telse if (typeof exports === 'object')\r\n\r\n\t\t\tmodule.exports = factory();\r\n\r\n\t\telse\r\n\r\n\t\t\troot.improver = factory();\r\n\r\n\t})(this, () => improver);\r\n\r\n}\r\n"]}